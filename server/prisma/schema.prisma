generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now())
  email      String     @unique
  password   String?
  provider   Provider
  Messages   Message[]
  profile    Profile?
  chats      Chat[]     @relation("ChatToUser")
  reactions  Reaction[]
}

model Profile {
  name     String  @unique
  imageUrl String?
  status   String?
  userId   String  @id @unique
  user     User    @relation(fields: [userId], references: [id])
}

model Chat {
  id            String    @id @default(uuid())
  created_at    DateTime  @default(now())
  name          String?
  lastMessageId String?   @unique
  lastMessage   Message?  @relation("lastMessage", fields: [lastMessageId], references: [id])
  messages      Message[]
  members       User[]    @relation("ChatToUser")
}

model Message {
  id      String      @id @default(uuid())
  content String
  type    MessageType

  replies  Message[] @relation("MessageReplies")
  parent   Message?  @relation("MessageReplies", fields: [parentId], references: [id])
  parentId String?

  chatId            String
  senderId          String
  lastMessageOfChat Chat?      @relation("lastMessage")
  Chat              Chat       @relation(fields: [chatId], references: [id])
  sender            User       @relation(fields: [senderId], references: [id])
  reactions         Reaction[]
  created_At        DateTime   @default(now())
}

model Reaction {
  id        String  @id @default(uuid())
  emoji     String
  message   Message @relation(fields: [messageId], references: [id])
  messageId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
}

enum Provider {
  Email
  Google
}

enum MessageType {
  Text
  Voice
  File
}
